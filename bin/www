#!/usr/bin/env node

/*

Reference:
    Express.js - app.listen vs server.listen
        Notes:
            server.listen gives you more control and use can use https because app.listen returns http.

        Reference:
            https://stackoverflow.com/questions/17696801/express-js-app-listen-vs-server-listen
 */

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('application:server');
const http = require('http');
const socketAPI = require("../socket_api");

/**
 * Get PORT from environment and store in Express.
 */

const PORT = normalizePort(process.env.PORT || '3000');
app.set('port', PORT);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided PORT, on all network interfaces.
 */

server.listen(PORT, (err) => {
    // TODO: CLEAN UP AND FIX FOR PRODUCTION
    if (err) {
        if (process.env.NODE_ENV === 'development') {
            console.log("On Development mode...")
        }

        console.log(err);
        return;
    }

    console.log(`Server listening on port: ${PORT}`);
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a PORT into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // PORT number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof PORT === 'string'
        ? 'Pipe ' + PORT
        : 'Port ' + PORT;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const address = server.address();
    const bind = typeof address === 'string'
        ? 'pipe ' + address
        : 'PORT ' + address.port;
    debug('Listening on ' + bind);
}

/*############################## socket.io ##############################*/

socketAPI.io.attach(server);
